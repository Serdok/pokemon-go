swagger: "2.0"
info:
  title: Pokémon Go by Serdok
  description: Endpoints for Pokémon Go by Serdok
  version: 1.0.0

host: serdok-pokemon-go.appspot.com

consumes:
  - application/json
produces:
  - application/json

schemes:
  - https

securityDefinitions:
  'firebase':
    authorizationUrl: ''
    flow: 'implicit'
    type: 'oauth2'
    x-google-issuer: 'https://securetoken.google.com/serdok-pokemon-go'
    x-google-jwks_uri: 'https://www.googleapis.com/service_accounts/v1/metadata/x509/securetoken@system.gserviceaccount.com'
    x-google-audiences: 'serdok-pokemon-go'

paths:
  '/echo':
    get:
      description: 'Echo a message from the server'
      operationId: 'echo'

      produces:
        - 'application/json'

      responses:
        200:
          description: 'Success'
          schema:
            type: string

  '/user/{name}':
    get:
      description: 'Get a user from its user name'
      operationId: 'get-user'
      tags: [ 'user' ]
      security:
        - firebase: []

      produces:
        - 'application/json'

      parameters:
        - name: 'name'
          description: 'A user name'
          in: 'path'
          required: true
          type: string

      responses:
        200:
          description: 'Success'
          schema:
            $ref: '#/definitions/UserResponse'
        404:
          description: 'Not found'
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/user/create':
    post:
      description: 'Create a user'
      operationId: 'create-user'
      tags: [ 'user' ]
      security:
        - firebase: []

      consumes:
        - 'application/json'
      produces:
        - 'application/json'

      parameters:
        - name: 'user'
          in: 'body'
          schema:
            $ref: '#/definitions/UserBody'

      responses:
        201:
          description: 'Success'
          schema:
            $ref: '#/definitions/UserResponse'
        401:
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse'
        403:
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/user/update':
    put:
      description: 'Update a user'
      operationId: 'update-user'
      tags: [ 'user' ]
      security:
        - firebase: []

      consumes:
        - 'application/json'
      produces:
        - 'application/json'

      parameters:
        - name: 'user'
          in: body
          schema:
            $ref: '#/definitions/UserBody'

      responses:
        201:
          description: 'Success'
          schema:
            $ref: '#/definitions/UserResponse'
        401:
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse'
        403:
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: 'Not Found'
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/user/delete/{name}':
    delete:
      description: 'Delete a user'
      operationId: 'delete-user'
      tags: [ 'user' ]
      security:
        - firebase: [ ]

      produces:
        - 'application/json'

      parameters:
        - name: 'name'
          description: 'A user uid'
          in: 'path'
          required: true
          type: string

      responses:
        204:
          description: 'Success'
        401:
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse'
        403:
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/team/{name}/get-all':
    get:
      description: 'Get all teams of a user'
      operationId: 'get-all-teams'
      tags: [ 'team' ]
      security:
        - firebase: []

      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: 'name'
          description: 'A user name'
          in: 'path'
          required: true
          type: string

      responses:
        200:
          description: 'Success'
          schema:
            $ref: '#/definitions/TeamsResponse'
        401:
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse'
        403:
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/team/{name}/get/{id}':
    get:
      description: 'Get a team of a user'
      operationId: 'get-team'
      tags: [ 'team' ]
      security:
        - firebase: [ ]

      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: 'name'
          description: 'A user name'
          in: 'path'
          required: true
          type: string
        - name: 'id'
          description: 'A team id'
          in: 'path'
          required: true
          type: string

      responses:
        200:
          description: 'Success'
          schema:
            $ref: '#/definitions/TeamResponse'
        401:
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse'
        403:
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/team/{name}/create':
    post:
      description: 'Get a team of a user'
      operationId: 'create-team'
      tags: [ 'team' ]
      security:
        - firebase: [ ]

      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: 'name'
          description: 'A user name'
          in: 'path'
          required: true
          type: string
        - name: 'team'
          description: 'A team'
          in: 'body'
          schema:
            $ref: '#/definitions/TeamBody'

      responses:
        200:
          description: 'Success'
          schema:
            $ref: '#/definitions/TeamResponse'
        401:
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse'
        403:
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/team/{name}/update/{id}':
    put:
      description: 'Update a team of a user'
      operationId: 'update-team'
      tags: [ 'team' ]
      security:
        - firebase: [ ]

      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: 'name'
          description: 'A user name'
          in: 'path'
          required: true
          type: string
        - name: 'id'
          description: 'A team id'
          in: 'path'
          required: true
          type: string
        - name: 'team'
          description: 'A team'
          in: 'body'
          schema:
            $ref: '#/definitions/TeamBody'

      responses:
        200:
          description: 'Success'
          schema:
            $ref: '#/definitions/TeamResponse'
        401:
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse'
        403:
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/team/{name}/delete/{id}':
    delete:
      description: 'Delete a team of a user'
      operationId: 'delete-team'
      tags: [ 'team' ]
      security:
        - firebase: [ ]

      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: 'name'
          description: 'A user name'
          in: 'path'
          required: true
          type: string
        - name: 'id'
          description: 'A team id'
          in: 'path'
          required: true
          type: string

      responses:
        204:
          description: 'Success'
        401:
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse'
        403:
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/team/{name}/delete':
    delete:
      description: 'Delete all teams of a user'
      operationId: 'delete-all-teams'
      tags: [ 'team' ]
      security:
        - firebase: [ ]

      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: 'name'
          description: 'A user name'
          in: 'path'
          required: true
          type: string

      responses:
        204:
          description: 'Success'
        401:
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse'
        403:
          description: 'Forbidden'
          schema:
            $ref: '#/definitions/ErrorResponse'


definitions:
  'User':
    type: object
    properties:
      'uid':
        type: string
      'name':
        type: string
    required: [ 'name', 'uid' ]
    example:
      'uid': 'aPOjQCKNwmterCYGZdLlCIGeBsD2'
      'name': 'Some Random Username :^)'

  'Resource':
    description: 'A Pokémon API Resource. Can be nullable'
    type: object
    properties:
      'id':
        type: integer
      'name':
        type: string
      'category':
        type: string
    required: [ 'id', 'name', 'category' ]
    discriminator: 'category'

  'Pokemon':
    allOf:
      - $ref: '#/definitions/Resource'
      - type: object
        description: 'A Pokémon API Resource of type "pokemon". Can be nullable'
        properties:
          'category':
            type: string
            enum: [ 'pokemon' ]
    example:
      'id': 3
      'name': 'venusaur'
      'category': 'pokemon'

  'Gender':
    allOf:
      - $ref: '#/definitions/Resource'
      - type: object
        description: 'A Pokémon API Resource of type "gender". Can be nullable'
        properties:
          'category':
            type: string
            enum: [ 'gender' ]
    example:
      'id': 1
      'name': 'female'
      'category': 'gender'


  'Ability':
    allOf:
      - $ref: '#/definitions/Resource'
      - type: object
        description: 'A Pokémon API Resource of type "ability". Can be nullable'
        properties:
          'category':
            type: string
            enum: [ 'ability' ]
    example:
      'id': 34
      'name': 'chlorophyll'
      'category': 'ability'

  'Item':
    allOf:
      - $ref: '#/definitions/Resource'
      - type: object
        description: 'A Pokémon API Resource of type "item". Can be nullable'
        properties:
          'category':
            type: string
            enum: [ 'item' ]
    example:
      'id': 247
      'name': 'life-orb'
      'category': 'item'

  'Berry':
    allOf:
      - $ref: '#/definitions/Resource'
      - type: object
        description: 'A Pokémon API Resource of type "berry". Can be nullable'
        properties:
          'category':
            type: string
            enum: [ 'berry' ]
    example:
      'id': 10
      'name': 'sitrus'
      'category': 'berry'

  'Move':
    allOf:
      - $ref: '#/definitions/Resource'
      - type: object
        description: 'A Pokémon API Resource of type "move". Can be nullable'
        properties:
          'category':
            type: string
            enum: [ 'move' ]
    example:
      'id': 188
      'name': 'sludge-bomb'
      'category': 'move'


  'HeldItem':
    allOf:
      - $ref: '#/definitions/Item'
      - $ref: '#/definitions/Berry'
      - description: 'A combination of all the holdable items. Can be nullable'


  'TeamEntry':
    type: object
    properties:
      'pokemon':
        $ref: '#/definitions/Pokemon'
      'gender':
        $ref: '#/definitions/Gender'
      'ability':
        $ref: '#/definitions/Ability'
      'item':
        $ref: '#/definitions/HeldItem'
      'moves':
        type: array
        minItems: 4
        maxItems: 4
        items:
          $ref: '#/definitions/Move'
    required: [ 'pokemon', 'gender', 'ability', 'item', 'moves' ]

  'Team':
    type: object
    properties:
      'id':
        type: string
      'name':
        type: string
      'entries':
        description: 'All 6 Pokémon that compose a team'
        type: array
        minItems: 6
        maxItems: 6
        items:
          $ref: '#/definitions/TeamEntry'

  'Teams':
    type: array
    items:
      $ref: '#/definitions/Team'

  'UserBody':
    $ref: '#/definitions/User'

  'TeamBody':
    $ref: '#/definitions/Team'


  'UserResponse':
    type: object
    properties:
      'user':
        $ref: '#/definitions/User'

  'TeamResponse':
    type: object
    properties:
      'team':
        $ref: '#/definitions/Team'

  'TeamsResponse':
    type: object
    properties:
      'teams':
        $ref: '#/definitions/Teams'

  'ErrorResponse':
    type: object
    properties:
      'error':
        type: string

